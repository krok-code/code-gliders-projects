{"version":3,"file":"commonHelpers2.js","sources":["../src/js/api.js","../src/js/actions-cards.js","../src/js/main-page.js","../src/js/popular-discount.js"],"sourcesContent":["import axios from 'axios';\nimport {getFilter} from './filters.js';\nconst BASE_URL = 'https://food-boutique.b.goit.study/api/products';\n\nexport async function getCategories() {\n  const response = await axios.get(`https://food-boutique.b.goit.study/api/products/categories`);\n  return response.data;\n}\n\nexport const fetchPopularProducts = () => {\n  const params = {\n    limit: 5,\n  };\n  return axios(`${BASE_URL}/popular`, { params });\n};\n\nexport const fetchDiscountProducts = () => {\n  return axios(`${BASE_URL}/discount`);\n};\n","import Swal from 'sweetalert2';\n\n// Функція, яка викликається при додаванні продукту до кошика\nexport async function addToCart(productId) {\n  // Знаходимо кнопку, яка відповідає за додавання продукту\n  console.log('hello');\n  const button = document.querySelector(\n    `.cart-button[data-product-id=\"${productId}\"]`\n  );\n\n  // Перевіряємо, чи кнопка існує та чи її клас не містить \"added\"\n  if (button && !button.classList.contains('added')) {\n    // Додаємо клас \"added\" до кнопки\n    button.classList.add('added');\n\n    // Змінюємо вміст кнопки, додаючи піктограму галочки\n    button.innerHTML = `\n      <span class=\"icon-container\">\n        <svg class=\"check-icon\" \n          width=\"18\" height=\"18\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 18 18\" fill=\"none\">\n          <path d=\"M15 4.5L6.75 12.75L3 9\" stroke=\"#E8E8E2\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n        </svg>\n      </span>\n    `;\n\n    // Функція для відображення сповіщення\n    function showNotification(message) {\n      // Викликаємо метод Swal.fire() з параметрами сповіщення\n\n      Swal.fire({\n        text: message,\n        icon: 'success',\n        timer: 2000,\n        showConfirmButton: false, // Приховати кнопку OK\n        customClass: {\n          container: 'custom-swal2-container',\n        },\n      });\n    }\n    // Викликаємо функцію для відображення сповіщення\n    showNotification('Product added to the cart');\n  }\n}\n\n  // Функція для перевірки наявності товару в кошику та використання localStorage\n  export async function checkIfInCart(productId) {\n    try {\n      // Отримуємо дані з localStorage\n      const cartData = JSON.parse(localStorage.getItem('cart')) || [];\n\n      // Перевіряємо, чи є товар в кошику\n      const isInCart = cartData.some(item => item.productId === productId);\n\n      return isInCart;\n    } catch (error) {\n      console.error('Error checking if product is in cart:', error);\n      return false;\n    }\n  }\n","import { addToCart, checkIfInCart } from './actions-cards';\n\ndocument.addEventListener('DOMContentLoaded', async () => {\n  // Отримуємо посилання на елементи DOM з відповідними ідентифікаторами\n  const productListElement = document.getElementById('productList');\n\n  // Перевіряємо, чи були успішно знайдені обидва елементи\n  if (!productListElement) {\n    // Якщо хоча б один елемент не знайдено, виводимо повідомлення про помилку та припиняємо виконання коду\n    console.error(\"Element with id 'productList' or 'pagination' not found.\");\n    return;\n  }\n\n  // Задаємо значення за замовчуванням для номера сторінки\n  const defaultPage = 1;\n  // Задаємо значення за замовчуванням для ліміту товарів на сторінці\n  const defaultLimit = 9;\n  // URL API для отримання інформації про товари\n  const apiUrl = 'https://food-boutique.b.goit.study/api/products';\n\n  // Функція для отримання та відображення списку продуктів\n  async function fetchProducts(page = defaultPage, limit = defaultLimit) {\n    try {\n      // Виконуємо HTTP-запит за допомогою fetch\n      const response = await fetch(\n        `${apiUrl}?byABC=true&byPrice=true&byPopularity=true&page=${page}&limit=${limit}`\n      );\n\n      // Перевіряємо, чи запит був успішним\n      if (!response.ok) {\n        throw new Error(`Network response was not ok: ${response.statusText}`);\n      }\n\n      // Розпаковуємо відповідь сервера у форматі JSON\n      const { results, page: currentPage, totalPages } = await response.json();\n\n      // Перевіряємо, чи дані є масивом продуктів\n      if (Array.isArray(results)) {\n        // Викликаємо функцію для відображення продуктів\n        await renderProductList(results);\n\n        // Оновлюємо пагінацію на сторінці\n        updatePagination(currentPage, totalPages);\n      } else {\n        // Якщо дані не є масивом, виводимо помилку у консоль\n        console.error(\n          'Received data does not contain an array of products:',\n          response.data\n        );\n      }\n    } catch (error) {\n      // Виводимо помилку у консоль, якщо її вдалося перехопити\n      console.error('Error fetching products:', error);\n    }\n  }\n\n  // Функція для створення розмітки HTML\n  function createProductCard(product) {\n    // Визначаємо текст кнопки \"Add to Cart\" або порожній рядок в залежності від наявності продукту в корзині\n    const cartButtonText = checkIfInCart(product._id) ? '' : 'Add to Cart';\n\n    // Створюємо рядок HTML для карточки продукту\n    return `\n    <li class=\"product-card\">\n      <div class=\"ooverlay\">\n          <img width=\"140px\" height=\"140px\" class=\"product-image\" ${\n            product.img ? `src=\"${product.img}\"` : 'src=\"./default-image.jpg\"'\n          } alt=\"${product.name}\">\n      </div>\n      <h3 class=\"product-name\">${product.name}</h3>\n      <p class=\"product-category\">\n        <span class=\"label-category\">Category:</span> ${product.category} \n      </p>\n      <p class=\"product-size\">\n        <span class=\"label-size\">Size:</span> ${product.size}\n      </p>\n      <p class=\"product-popularity\">\n        <span class=\"label-popularity\">Popularity:</span> ${product.popularity}\n      </p>\n      <p class=\"product-price\">$${product.price.toFixed(2)}</p>\n      <button class=\"cart-button\" data-product-id=\"${\n        product._id\n      }\">${cartButtonText}</button>\n    </li>`;\n  }\n\n  // Все все що вище вже запущено////\n\n  // Функція для відображення списку продуктів\n  async function renderProductList(products) {\n    // Очищаємо вміст елементу з id=\"productList\"\n    productListElement.innerHTML = '';\n\n    // Проходимося по кожному продукту в отриманому масиві\n    for (const product of products) {\n      // Створюємо HTML-представлення карточки продукту\n      const productCard = createProductCard(product);\n\n      // Додаємо HTML-представлення продукту в кінець списку продуктів\n      productListElement.insertAdjacentHTML('beforeend', productCard);\n    }\n  }\n\n  /////////////////\n\n  productListElement.addEventListener('click', async event => {\n    // Перевіряємо, чи клікнуто по елементу з класом \"cart-button\"\n    if (event.target.classList.contains('cart-button')) {\n      // Отримуємо ідентифікатор товару з атрибуту \"data-product-id\"\n      const productId = event.target.dataset.productId;\n      // Викликаємо функцію для додавання товару в кошик та очікуємо завершення операції\n      await addToCart(productId);\n    }\n  });\n\n  // Виклик функції для отримання першої сторінки товарів\n  fetchProducts();\n});\n","import { fetchDiscountProducts, fetchPopularProducts } from './api';\n\nconst refs = {\n  popular: document.querySelector('.popular_list'),\n  discount: document.querySelector('.discount_list'),\n};\n\ndocument.addEventListener('DOMContentLoaded', fetchPopular);\ndocument.addEventListener('DOMContentLoaded', fetchDiscount);\n\nasync function fetchPopular() {\n  try {\n    const { data } = await fetchPopularProducts();\n    refs.popular.insertAdjacentHTML('beforeend', createPopularList(data));\n\n    console.log(data);\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nfunction createPopularList(array) {\n  return array\n    .map(\n      card => ` <li class=\"card_item\">\n      <div class=\"card_img\">\n        <img\n          src=${card.img}\n          width=\"56\"\n          height=\"56\"\n          alt=${card.name}\n        />\n      </div>\n      <div class=\"card_elements\">\n        <h3 class=\"card_title\">${card.name}</h3>\n        <p class=\"card_text card_text--margin_b\">\n          <span class=\"card_el\">Category:</span>&nbsp;<span>${card.category}</span>\n        </p>\n        <p class=\"card_text\">\n          <span class=\"card_el\">Size:</span>&nbsp;<span>${card.size}</span\n          ><span class=\"card_el card_el--margin_l\">Popularity:</span>&nbsp;<span\n            >${card.popularity}</span\n          >\n        </p>\n      </div>\n      <button type=\"button\" class=\"card_btn\">\n        <svg class=\"order_btn\" width=\"12\" height=\"12\">\n          <use href=\"../img/icons.svg#shopping-cart\"></use>\n        </svg>\n      </button>\n    </li>`\n    )\n    .join('');\n}\n\nasync function fetchDiscount() {\n  try {\n    const { data } = await fetchDiscountProducts();\n    refs.discount.insertAdjacentHTML(\n      'beforeend',\n      createDiscountList(data.slice(0, 2))\n    );\n    console.log(data);\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nfunction createDiscountList(array) {\n  return array\n    .map(\n      card => `\n    <li class=\"discount_card_item\">\n      <div class=\"discount_card_img\">\n        <img\n          src=${card.img}\n          width=\"114\"\n          height=\"114\"\n          alt=${card.name}\n        />\n        </div>\n        <div class=\"svg_box\">\n          <svg width=\"60\" height=\"60\">\n            <use href=\"../img/icons.svg#discount\">\n            </use>\n          </svg>\n        </div>\n\n      <div class=\"discount_card_elements\">\n        <h3 class=\"card_title--discount card_title\">${card.name}</h3>\n        <span class=\"card_title--price card_title \">${card.price}</span>\n\n        <button type=\"button\" class=\"discount_card_btn\">\n          <svg  width=\"18\" height=\"18\">\n          <use href=\"../img/icons.svg#shopping-cart\"></use>\n          </svg>\n        </button>\n          \n      </div>  \n    </li> `\n    )\n    .join('');\n}\n"],"names":["BASE_URL","fetchPopularProducts","params","axios","fetchDiscountProducts","addToCart","productId","button","showNotification","message","Swal","checkIfInCart","item","error","productListElement","defaultPage","defaultLimit","apiUrl","fetchProducts","page","limit","response","results","currentPage","totalPages","renderProductList","createProductCard","product","cartButtonText","products","productCard","event","refs","fetchPopular","fetchDiscount","data","createPopularList","array","card","createDiscountList"],"mappings":"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"}